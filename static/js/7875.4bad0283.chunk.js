"use strict";(self.webpackChunksc_trees=self.webpackChunksc_trees||[]).push([[7875],{97875:(t,e,s)=>{s.r(e),s.d(e,{queryUnitIdentifiers:()=>l});var n=s(3825),r=s(54994),i=s(35143),o=s(42553),a=s(46053),u=(s(81806),s(76460),s(47249),s(28379)),c=s(85842);let d=class extends o.A{constructor(t){super(t),this.container=null,this.ranges=null}readContainer(t,e){return{sourceId:e.sourceId,globalId:e.globalId}}readRanges(t,e){return[...e.gaps.map(t=>({firstUnit:t.start,numUnits:t.end-t.start+1,isGap:!0})),...e.unitIdentifiers.map(t=>({firstUnit:t.firstUnit,numUnits:t.numUnits,isGap:!1,content:{sourceId:t.sourceId,globalId:t.globalId}}))]}};async function l(t,e,s){const i=(0,r.Dl)(t),o=e.toJSON();e.objects&&(o.objects=JSON.stringify(e.objects));const a={...o,f:"json"},u=(0,r.lF)({...i.query,...a}),c=(0,r.jV)(u,{...s,method:"post"}),l=`${i.path}/unitIdentifiers/query`,{data:p}=await(0,n.A)(l,c);return p.objects.map(t=>d.fromJSON(t))}(0,i._)([(0,a.MZ)({type:Object})],d.prototype,"container",void 0),(0,i._)([(0,u.w)("container",["sourceId","globalId"])],d.prototype,"readContainer",null),(0,i._)([(0,a.MZ)({type:[Object]})],d.prototype,"ranges",void 0),(0,i._)([(0,u.w)("ranges",["gaps","unitIdentifiers"])],d.prototype,"readRanges",null),d=(0,i._)([(0,c.$)("esri.rest.networks.unitIdentifiers.support.UnitQueryResult")],d)}}]);
//# sourceMappingURL=7875.4bad0283.chunk.js.map